NVM
\ NVM is the word used to switch to non volatile memory. Everything from here 
\ until we switch to RAM survies power cycles.

\ Variables
\ Variables are Memory Addresses which we can save and retrieve data from.
\ Tip - Define these first to ensure the address they point to resides in the first 256 bytes of RAM. 
\       That way they can be accessed with very fast assembly extensions should speed be needed.
\       They can still be accessed with conventional Forth words @ < fetch > and ! <store >
\ No User defined Variabels are used in this file.
\ 
\ Some assembley extensions. I use these all the time so I put them next
: NOP ( -- ) $9D C, ; IMMEDIATE \ compile in-line a NOP
: ]B? ( c-addr bit -- f )
     $905F , 2* $7201 + , , $0290 , $5A5A , $5AFF , ]
; IMMEDIATE
: ]B! ( 1|0 addr bit -- )
  ROT 0= 1 AND SWAP 2* $10 + + $72 C, C, , ]
; IMMEDIATE 
: ]C! $35 C, SWAP C, , ] ; IMMEDIATE
RAM
\ RAM is the word which switches to Random Access Memory. It also allows the words in NVM to survive power cycles.

NVM
\ Port C Pins
7 constant _TxEn \ 0b1000 0000
\ The TX enable pin sits on bit 7 of Port C
\ Now, whenever the constant is used it pushes the number 7 onto the stack.
\ You can call this almost anything
\ I picked up the habit of prefacing all pin references with _ somewhere to help me remember what the word means.

$50C6 CONSTANT CLK_DIVR
\ A constant for the clock divider address

\ These are used to create an interrupt handler. Explanation for another day.
: :NVM ( -- xt ) NVM HERE ] ;
: ;NVM ( xt -- xt ) POSTPONE [ $81 C, ;  IMMEDIATE

RAM
\ These constants have been defined in RAM. They still push the number onto the stack when used
\ but once the power is cycled they are lost. 
\ However, any NVM word which referenced them has survived so the addresses are safely saved where they are needed.

\ These are used to set up the active halt power down state
$50F0 CONSTANT AWU_CSR1  
$50F1 CONSTANT AWU_APR
$50F2 CONSTANT AWU_TBR
$800E CONSTANT INT_AWU
NVM

\ When P500 is used it saves bytes in various registers, which in the STM8S chips means a memory adress, 
\ This initialises the Auto Wakeup Routine and then executes an eative halt when the $81 op-code is executed.

: P500 ( -- )    \ Auto Wakeup Period is about 500ms
\ I am using [ to start assembling directly to memory
\ Done for speed since I am trying to save every erg for battery life
\ [ byte Address ]C! means save the byte at the given address
  [ 62 AWU_APR ]C! [ $B AWU_TBR ]C!
  [ 16 AWU_CSR1 ]C! \ AWU enabled
\ Here, I directly code an instruction in NVM. 
  [ $8E C, ] \ HALT for AWU period
  [ 0 AWU_TBR ]C! \ reduce power consumption
;

\ We have to deal with the interrupt when the chip wakes up.
\ So just read it and exit the interrupt routine
:NVM              \ interrupt handler, "headerless" code
   SAVEC
   AWU_CSR1 C@ \ reading clears the interrupt
   IRET
;NVM ( xt ) INT_AWU !

RAM 
\ lots of constants here pointing to registers used for low power consumption
\ No need to keep these once the words which refernce htem have been definined in NVM
\ But you could if you wanted to and had the room in NVM
\ It's very hard to run out of NVM so it's a personal choice most of the time where these are
\ but good practice is to only save in NVM what has to survive a power cycle.

$50C0 CONSTANT CLK_ICKR
$505A CONSTANT FLASH_CR1
$50C7 CONSTANT CLK_PCKENR1
$50CA CONSTANT CLK_PCKENR2
$5200 CONSTANT SPI_CR1
$5210 CONSTANT I2C_CR1
$5235 CONSTANT UART1_CR2
$5401 CONSTANT ADC_CR1
$5250 CONSTANT TIM1_CR1
$5300 CONSTANT TIM2_CR1
$5340 CONSTANT TIM4_CR1

$5000 constant PA_ODR
$5002 constant PA_DDR
$5005 constant PB_ODR
$5007 constant PB_DDR
$500A constant PC_ODR
$500C constant PC_DDR
$500D constant PC_CR1
$500E constant PC_CR2
$500F constant PD_ODR
$500F constant PD_IDR
$5011 constant PD_DDR
$5012 constant PD_CR1
$5014 constant PE_IDR
$5016 constant PE_DDR
$5019 constant PF_IDR
$501B constant PF_DDR

NVM 
\ Two words which set the enable pin ON (high) or OFF (low)
: _TXon  [ 1 PC_ODR _TxEn ]B!  ; 
: _TXoff  [ 0 PC_ODR _TxEn ]B! NOP NOP NOP NOP NOP NOP ; \ 8 bytes 

\ Now we can set a pin high or low, let's define words which send a 0 or a 1 over the RF link
: .0  _TXoff _TXon ;
: .1  _TXoff _TXoff _TXon ;

\ The NOP's mean do nothing this clock cycle
\ They were required because the CPU clock ahs been slowed down to 125kHz to save power.
\ I will explain later why the NOP's appear where they do
: .End 
  NOP NOP NOP _TxOff  \  turn tx off
;


: Tx.Start ( -- ) \ transmit two start pulses
    _TXon _TXon _TXon _TXon _TXon \ 11111
    _TXoff _TXoff _TXon _TXon _TXon \ 00111
   \ TX turned off by next bit in packet
;
     
: Tx.On ( -- ) \ Transmit $55 over RF
   Tx.Start
   .0 .1 .0 .1 .0 .1 .0 .1 
   .End
;
: Tx.Off ( -- ) \ Transmit $AA over RF
   Tx.Start
   .1 .0 .1 .0 .1 .0 .1 .0
   .End
;

\ Set up the _TXEn pin to be a fast switching push pull output.
\ [ 0|1 Addr Bit ]B! means start the compiler and save a 0 or 1 to the bit at the specified address
\
\ Alternative way is also shown
: set_pins  ( -- )
   [ 1 PC_DDR _TxEn ]B!  \ Port c outputs
\   $80 PC_DDR C! \ an alterntive way of setting bit 7 high in the PC_DDR register
\                 \ I prefer ]B! since it leaves all other bits undisturbed.
   [ 1 PC_CR1 _TxEn ]B!  \ _TxEn is push pull
   [ 1 PC_CR2 _TxEn ]B!  \ _TxEn is fast
;
: MIN_I \ prepare for mimimum current draw
\ Changes a whole lot of hardware registers to achieve minimum current draw
\ on reset these are off but included for reference if needed   
   [ 0 SPI_CR1 6 ]B! \ SPI off
   [ 0 I2C_CR1 0 ]B! \ I2C off
   [ 0 UART1_CR2 3 ]B! \ UART tX off
   [ 0 UART1_CR2 2 ]B! \ UART RX off
   [ 0 ADC_CR1 0 ]B! \ ADC off
   [ 0 TIM1_CR1 0 ]B! \ Tim1 off
   [ 0 TIM2_CR1 0 ]B! \ Tim2 off
   [ 0 TIM4_CR1 0 ]B! \ Tim4 off
   
   [ 1 CLK_ICKR 5 ]B! \ MVR regulator OFF in Active-halt mode
   [ 1 FLASH_CR1 2 ]B! \ Flash powered down in aCtive Halt mode
   [ 0 CLK_PCKENR1 ]C! \ No clock to peripherals
\   [ 0 CLK_PCKENR2 7 ]B! \ No clock to CAN - unused on STM8003
   [ 0 CLK_PCKENR2 3 ]B! \ No clock to ADC
\   [ 0 CLK_PCKENR2 2 ]B! \ No clock to AWU  DEspite what datasheet says I found you have to 

\ following made need adjustment for connected hardware !!!   
   
   [ $FF PA_DDR ]C! \ all ports made outputs 
   [ $FF PB_DDR ]C! 
   [ $FF PC_DDR ]C!
   [ $FF PD_DDR ]C!
   [ $0 PA_ODR ]C! \ all ports made outputs low level
   [ $0 PB_ODR ]C! 
   [ $0 PC_ODR ]C!
   [ $0 PD_ODR ]C!
;   
: MAIN 
   MIN_I \ set everything to minimise current draw
   set_pins \ set up pin needed as an output
   $1D CLK_DIVR C! \   Slow the CPU Clock to /8 /16 to 125KHz  
   BEGIN
      Tx.On P500 \ Send an ON byte then sleep for 500ms
      Tx.On P500 \ Send an ON byte then sleep for 500ms
      Tx.On P500 \ Send an ON byte then sleep for 500ms
      Tx.Off P500 \ Send an OFF byte then sleep for 500ms 
      Tx.Off P500 \ Send an OFF byte then sleep for 500ms
      Tx.Off P500 \ Send an OFF byte then sleep for 500ms
   AGAIN
;
RAM
\ with all the testing complete it is time to execute MAIN whenever poewr is applied	

NVM 	\ switch to NVM
' MAIN 	\ get the code field address of MAIN
'Boot ! \ save it in 'Boot so that it is called when power is applied
RAM 	\ switch back to RAM to make these changes non-volatile
